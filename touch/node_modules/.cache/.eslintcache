[{"C:\\Users\\VICKY MISHRA\\Desktop\\my-touch-typing-app\\touch\\src\\index.js":"1","C:\\Users\\VICKY MISHRA\\Desktop\\my-touch-typing-app\\touch\\src\\App.js":"2","C:\\Users\\VICKY MISHRA\\Desktop\\my-touch-typing-app\\touch\\src\\reportWebVitals.js":"3","C:\\Users\\VICKY MISHRA\\Desktop\\my-touch-typing-app\\touch\\src\\Components\\TouchTyping.js":"4","C:\\Users\\VICKY MISHRA\\Desktop\\my-touch-typing-app\\touch\\src\\Components\\Join.js":"5","C:\\Users\\VICKY MISHRA\\Desktop\\my-touch-typing-app\\touch\\src\\Components\\Footer.js":"6","C:\\Users\\VICKY MISHRA\\Desktop\\my-touch-typing-app\\touch\\src\\Components\\Navbar.js":"7","C:\\Users\\VICKY MISHRA\\Desktop\\my-touch-typing-app\\touch\\src\\Components\\Newlesson.js":"8"},{"size":513,"mtime":1691944032349,"results":"9","hashOfConfig":"10"},{"size":1002,"mtime":1692039893800,"results":"11","hashOfConfig":"10"},{"size":375,"mtime":1691944032352,"results":"12","hashOfConfig":"10"},{"size":8713,"mtime":1693402948031,"results":"13","hashOfConfig":"10"},{"size":2559,"mtime":1693401474584,"results":"14","hashOfConfig":"10"},{"size":3654,"mtime":1691944032346,"results":"15","hashOfConfig":"10"},{"size":1123,"mtime":1692040173922,"results":"16","hashOfConfig":"10"},{"size":6755,"mtime":1693402921955,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"1tmfofc",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"21"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},"C:\\Users\\VICKY MISHRA\\Desktop\\my-touch-typing-app\\touch\\src\\index.js",[],[],[],"C:\\Users\\VICKY MISHRA\\Desktop\\my-touch-typing-app\\touch\\src\\App.js",[],[],"C:\\Users\\VICKY MISHRA\\Desktop\\my-touch-typing-app\\touch\\src\\reportWebVitals.js",[],[],"C:\\Users\\VICKY MISHRA\\Desktop\\my-touch-typing-app\\touch\\src\\Components\\TouchTyping.js",["48","49","50","51","52","53","54"],[],"import React, { useState, useEffect } from 'react';\r\nimport Navbar from './Navbar';\r\nimport Footer from './Footer';\r\nimport { motion } from 'framer-motion';\r\nimport useSound from 'use-sound';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport Swal from 'sweetalert2';\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst TouchTyping = () => {\r\n\r\n  let text='A data entry clerk is a member of staff employed to enter or update data into a computer system. Data is often entered into a computer from paper documents using a keyboard.';\r\n  const [keyCounting, setkeyCounting] = useState(0);\r\n\r\n  const [writtenText, setwrittenText] = useState('');\r\n\r\n  const [accuracy, setAccuracy] = useState(0);\r\n\r\n  const [remainingTime, setRemainingTime] = useState(1 * 60); // 1 minutes in seconds\r\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\r\n\r\nconst [play] = useSound('click2.mp3');\r\nconst [play2] =useSound('loginsound.mp3');\r\nconst [play3] =useSound('click sound.mp3')\r\nconst [alertsound]=useSound('alert.mp3')\r\n\r\n  useEffect(() => {\r\n    let countdownInterval;\r\n\r\n    if (isTimerRunning) {\r\n/*textarea me keyUp  karne par isTimerRunning is set to true and on blur, i.e on going out of textarea it is set to false through function calls.\r\nisTimerRunning is set to false by default and it is the dependency of the useEffect , so on changing it to true from default value false useeffect will start executing\r\nand hence timer will start decreasing and on blur it is set to false again useeffect will start executing and this time it is false so timer will not decrease\r\nit will be stop*/\r\n      countdownInterval = setInterval(() => {\r\n        setRemainingTime(previousTime => previousTime - 1);\r\n      }, 1000);\r\n    }\r\n\r\n    if (remainingTime === 0) {\r\n      clearInterval(countdownInterval);\r\n/*The setInterval() method continues calling the function until clearInterval() is called, or the window is closed.therefore it will continue its execution even after 60 sec completes\r\nit will start showing remaining time in minus, if we will not stop the setInterval web api at remainingTime===0 in above line of code */\r\n      //i will take my actions when the 1-minute window is completed\r\n      alertsound()\r\n      Swal.fire('Practice session completed.  '+'accuracy='+ accuracy+'%.'+ ' no of key pressed ='+ keyCounting + ' RESET TEST TO PRACTICE AGAIN')\r\n    }\r\n\r\n    return () => clearInterval(countdownInterval);\r\n  }, [remainingTime, isTimerRunning]);\r\n\r\n  function startTimer() {\r\n    setIsTimerRunning(true);\r\n  }\r\n\r\n  function stopTimer() {//This function will call on 'onBlur' event on text input area \r\n    setIsTimerRunning(false);\r\n  }\r\n\r\n  function setter() {\r\n    //This function get called on clicking reset button. it is resetting the every values and also t-it erasing the texts written in textarea .\r\n\r\n    Swal.fire({\r\n      title: 'Are you sure?',\r\n      text: \"You won't be able to revert this!\",\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Yes, reset it!'\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        //on clicking 'yes reset it' button , result.isConfirmed set to true.\r\n        Swal.fire(\r\n          'Reset done!',\r\n          'Your file has been reset.',\r\n          'success',\r\n    setAccuracy(0),\r\n    setkeyCounting(0),\r\n    setRemainingTime(60),\r\n    setwrittenText(''),\r\n        )\r\n      }\r\n    })\r\n\r\n    \r\n  }\r\n\r\n  const changeHandler = event => {\r\n    //this function get called whenever we will do any changes in textarea i.e onchange event.\r\n    const  value  = event.target.value;/*the handleChange function extracts the value property from the event.target element (which is the input field) and logs \r\n    the current value of the input whenever the user types in it..*/\r\n    setwrittenText(value);//whatever i have written in input field. it get stored in 'value'\r\n    /*setWrittenText was empty by default, now onchange in input field it is getting updated */\r\n    calculateAccuracy(text, value);//function get called and text and value passed\r\n    /*text hamara lesson hai , whereas value is the text written inside input field */\r\n    setkeyCounting(previousCounting => previousCounting + 1);//every time onchange event this function get called and hence key count increase by 1 everytime.\r\n  };\r\n\r\n  const calculateAccuracy = (originalText, writtenText) => {\r\n    //originalText m text ka value a gaya and written text k textarea m likha hua vakue a gaya.\r\n    const originalWords = originalText.trim().split(' ');//the split() function depends on the delimiter you provide. In this case, using a space \" \" as the delimiter results in the string being split at each space, producing an array of words.\r\n    const typedWords = writtenText.trim().split(' ');//the trim() function removes the leading and trailing spaces.\r\n    const originalLength = originalWords.length;\r\n    /*originalWord is a array of words which has been created by performing trim and split operation on originalText*/\r\n    let matchingWords = 0;\r\n\r\n    for (let i = 0; i < originalLength; i++) {\r\n      if (originalWords[i] === typedWords[i]) {\r\n        //here we are comparing both originalWords and typedWord arrays and then executing if block\r\n        matchingWords++;//if element or word at index i of both arrays becomes equal,then it will increase matchingWord by 1;\r\n        originalWords[i]=' '\r\n      }\r\n    }\r\n//'originalLength' matlab originalWord array me total kitne elements hai \r\n    const calculatedAccuracy = (matchingWords / originalLength) * 100;\r\n    //lesson vale text ka ham ek array banaye hai  trim and split karke,  aur usi array ka length hai 'originalLength' \r\n    /*lets suppose matchingWord=10 and also originalLength is also 10 (it means originalWords array me 10 words the and sab ke sab match ho gaye hai)\r\n     therefor accuracy=10/10*100=100%    */\r\n    setAccuracy(calculatedAccuracy.toFixed(3));\r\n  };\r\n\r\n  return (\r\n    <motion.div style={{ borderRadius: '0.5rem' \r\n    }} animate={{ opacity: 1 }} initial={{ opacity: 0 }} transition={{ duration: 4 }} >  \r\n   \r\n\r\n      <div\r\n        whileHover={{ scale: 1.1 }} className=\"container text-center \" style={{ backgroundImage:\r\n          'url(\"https://images.unsplash.com/photo-1537147347432-676815edd56c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxleHBsb3JlLWZlZWR8MTc3fHx8ZW58MHx8fHx8&auto=format&fit=crop&w=500&q=60\")',paddingTop: '0.5rem',paddingBottom: '0.5rem',  marginTop: '2.5rem', borderRadius: '0.5rem'}}\r\n      >\r\n        <div class=\"row\">\r\n          <div class=\"col\">\r\n\r\n            <motion.p style={{ color: '#ef9273'}}>\r\n              [instruction to type:-Please Look carefully the spaces given between two letters or words, type accordingly for better accuracy]\r\n            </motion.p>\r\n\r\n            <motion.h4 style={{ color: '#ef9273',fontSize:'bold',textShadow: '1px 1px 2px black, 0 0 25px yellow, 0 0 5px yellow'}} id=\"lesson\">\r\n              Lesson  :-{text}\r\n            </motion.h4>\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"input-group\" style={{color:' #ef9273'}}>\r\n        <motion.textarea whileHover={{ scale: 1.1 }} onKeyDown={play3} className=\"form-control \" value={writtenText} onChange={changeHandler} onKeyUp={startTimer} onBlur={stopTimer}  aria-label=\"With textarea\" placeholder=\"Start typing .......\" style={{ color:'#ef9273',border: '0.1rem solid #ef9273', marginLeft: '5rem', marginRight: '5rem', fontSize: 50 ,backgroundColor:\"black\"}} ></motion.textarea>\r\n      </div>\r\n\r\n      <b>\r\n        <p style={{ color: '#ef9273', marginTop: '1rem' }}>Remaining Time: {remainingTime} seconds | Accuracy: {accuracy}% | No of keys pressed: {keyCounting} </p>\r\n      </b>\r\n    \r\n      <motion.button whileHover={{ scale: 1.1 }} className=\"btn  btn-danger\" style={{ backgroundColor: '#ef9273' }} onClick={setter} onFocus={play2}>\r\n       Reset the Test\r\n      </motion.button>\r\n\r\n      <NavLink to='/Newlesson'><motion.button whileHover={{ scale: 1.1 }} className=\"btn  btn-danger\" style={{ backgroundColor: '#ef9273', marginLeft:'1rem'  }}  >New Lesson</motion.button></NavLink>\r\n      <ToastContainer/>\r\n    </motion.div>\r\n  );\r\n};\r\nexport default TouchTyping;\r\n\r\n/*some notes\r\nvalue={writtenText} => by writing this inside text input field we are defining the default value inside the input area\r\nThe value attribute is used differently for different input types:\r\n\r\nFor \"button\", \"reset\", and \"submit\" - it defines the text on the button\r\nFor \"text\", \"password\", and \"hidden\" - it defines the initial (default) value of the input field\r\n*/\r\n","C:\\Users\\VICKY MISHRA\\Desktop\\my-touch-typing-app\\touch\\src\\Components\\Join.js",["55","56","57"],[],"import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {motion} from 'framer-motion'\r\nimport useSound from 'use-sound';\r\nimport Swal from 'sweetalert2';\r\n\r\n\r\nlet emails;\r\nlet user;//is variable ko agar function k andar rakhenge to ye export nahi ho payega\r\nexport default function Join() {\r\n     const [name,setName]=useState(\"\");\r\n     const [email,setEmail]=useState(\"\")\r\n    function sendUser(e){\r\n      user=document.getElementById('joinInput').value\r\n      emails=document.getElementById('email').value\r\n        \r\n      if(name==''||email==''){\r\n        e.preventDefault()\r\n        play();\r\n\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Oops...',\r\n          text: 'Some detais are missing. please fill it!',\r\n          footer: '<a href=\"\">Why do I have this issue?</a>'\r\n        })\r\n\r\n      }\r\n\r\n  \r\n    }\r\n    const [play] = useSound('error.mp3');\r\n     \r\n  return (\r\n   <div  >\r\n<center >\r\n\r\n\r\n\r\n<motion.div className=\"container\" animate={{ opacity:1 }} initial={{opacity:0}} transition={{duration:4}}\r\n     style={{rotate: 0 ,backgroundColor:'black',height:'25rem',width:'20rem',marginTop:'4rem', borderRadius:'1rem', border:'0.1rem solid #ef9273', backgroundImage: `url(\"https://png.pngtree.com/thumb_back/fh260/background/20200714/pngtree-modern-double-color-futuristic-neon-background-image_351866.jpg\")` ,boxShadow:'1px 1px 2px black, 0 0 25px white, 0 0 5px white'}}>\r\n\r\n<div className=\"container\" >\r\n\r\n    <motion.img whileHover={{scale:1.1}} src='user.png' alt=\"\" style={{width:'10rem',height:\"7rem\",marginTop:'1rem'}}/><br></br><br></br>\r\n    <h1 style={{color:'#ef9273',borderBottom:'0.2rem solid white'}}>Typer's Friend</h1>\r\n    <br></br>\r\n \r\n    <motion.input  whileHover={{scale:1.1}} type='text' id='joinInput' onChange={(e)=>setName(e.target.value)} placeholder='Enter your name' style={{borderRadius:'0.5rem',marginBottom:'1rem',border:'0.1rem solid #ef9273'}}></motion.input>\r\n    <motion.input  whileHover={{scale:1.1}} type='text' id='email' onChange={(e)=>setEmail(e.target.value)} placeholder='Enter email-id' style={{borderRadius:'0.5rem',marginBottom:'1rem',border:'0.1rem solid #ef9273 '}}></motion.input>\r\n\r\n  <Link  to='/TouchTyping'><motion.button whileHover={{scale:1.2}}  className=\"btn btn-danger\" style={{marginTop:'0.5rem',width:'10rem',backgroundColor:'#ef9273'}} onClick={sendUser}  >LogIn</motion.button></Link>\r\n  {/**!name means  name khali hai,name k andar koi value nahi hai */}\r\n</div>\r\n  \r\n</motion.div></center>\r\n\r\n \r\n   </div>\r\n  )\r\n}\r\nexport {user}\r\n\r\n","C:\\Users\\VICKY MISHRA\\Desktop\\my-touch-typing-app\\touch\\src\\Components\\Footer.js",["58"],[],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <div style={{marginTop:'2rem'}} >\r\n      \r\n      <div  style={{marginTop: \"5px\"}}>\r\n  \r\n  <footer\r\n          className=\"text-center text-lg-start text-white\"\r\n          style={{backgroundColor:\"#ef9273\" }}\r\n          >\r\n   \r\n    <div className=\"container p-4 pb-0\" style={{color:'black'}}>\r\n      \r\n      <section className=\"\">\r\n       \r\n        <div className=\"row\">\r\n          \r\n          <div className=\"col-md-3 col-lg-3 col-xl-3 mx-auto mt-3\">\r\n            <h6  className=\"text-uppercase mb-4 font-weight-bold\">\r\n              <i></i>Typers Friend\r\n            </h6>\r\n            <p id=\"para4\">\r\n              This website provides its users the facility to enhance their typing by providing their net accuracy.\r\n            </p>\r\n          </div>\r\n          \r\n\r\n          <hr className=\"w-100 clearfix d-md-none\" />\r\n\r\n          <hr className=\"w-100 clearfix d-md-none\" />\r\n\r\n         \r\n          <hr className=\"w-100 clearfix d-md-none\" />\r\n\r\n         \r\n          <div className=\"col-md-4 col-lg-3 col-xl-3 mx-auto mt-3\">\r\n            <h6 className=\"text-uppercase mb-4 font-weight-bold\">Contact</h6>\r\n            <p id=\"para5\"><i className=\"fas fa-home mr-3\"></i> Patna, Bihar, India</p>\r\n            <p id=\"para6\"><i className=\"fas fa-envelope mr-3\"></i>mishravicky0141@gmail.com</p>\r\n            <p id=\"para7\"><i className=\"fas fa-phone mr-3\"></i> + 01 234 567 88</p>\r\n          </div>\r\n         \r\n          <div className=\"col-md-3 col-lg-2 col-xl-2 mx-auto mt-3\">\r\n            <h6 className=\"text-uppercase mb-4 font-weight-bold\">Follow us</h6>\r\n\r\n           \r\n            <a\r\n               className=\"btn btn-primary btn-floating m-1\"\r\n               style={{backgroundColor: \"#3b5998\",height:'2rem'}}\r\n               href=\"https://www.facebook.com/r.php?nis=8\"\r\n               role=\"button\"\r\n               ><i className='fab fa-facebook-f'></i\r\n              ></a>\r\n\r\n              \r\n            <a\r\n               className=\"btn btn-primary btn-floating m-1\"\r\n               style={{backgroundColor: \"#55acee\"}}\r\n               href=\"https://twitter.com/i/flow/login\"\r\n               role=\"button\"\r\n               ><i className='fab fa-twitter'></i\r\n              ></a>\r\n\r\n            \r\n            <a\r\n               className=\"btn btn-primary btn-floating m-1\"\r\n               style={{backgroundColor: \"#dd4b39\"}}\r\n               href=\"https://www.google.com/\"\r\n               role=\"button\"\r\n               ><i className=\"fab fa-google\"></i\r\n              ></a>\r\n\r\n           \r\n            <a\r\n               className=\"btn btn-primary btn-floating m-1\"\r\n               style={{backgroundColor: \"#ac2bac\"}}\r\n               href=\"https://www.instagram.com/accounts/login/\"\r\n               role=\"button\"\r\n               ><i className=\"fab fa-instagram\"></i>\r\n              </a>\r\n\r\n           \r\n            <a\r\n               className=\"btn btn-primary btn-floating m-1\"\r\n               style={{backgroundColor: \"#0082ca\"}}\r\n               href=\"https://www.linkedin.com/login\"\r\n               role=\"button\"\r\n               ><i className=\"fab fa-linkedin\"></i\r\n              ></a>\r\n           \r\n            <a\r\n               className=\"btn btn-primary btn-floating m-1\"\r\n               style={{backgroundColor: \"#333333\"}}\r\n               href=\"https://github.com/login\"\r\n               role=\"button\"\r\n               ><i className=\"fab fa-github\"></i\r\n              ></a>\r\n          </div>\r\n        </div>\r\n       \r\n      </section>\r\n      \r\n    </div>\r\n    \r\n   \r\n   \r\n  </footer>\r\n  \r\n</div>\r\n\r\n    </div>\r\n  )\r\n}","C:\\Users\\VICKY MISHRA\\Desktop\\my-touch-typing-app\\touch\\src\\Components\\Navbar.js",["59","60","61","62","63"],[],"import React, { useContext, useState,createContext } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { user } from '../App'\r\nimport { motion } from 'framer-motion'\r\nimport useSound from 'use-sound'\r\nimport { contextdata } from '../App'\r\n\r\nexport default function Navbar() {\r\n\r\n  const users=useContext(contextdata)\r\n\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar\"  style={{backgroundColor:'#ef9273'}} >\r\n  <div className=\"container-fluid\"  >\r\n    <Link to='#' className=\"navbar-brand\" >\r\n      <img src=\"key.png\" alt=\"Logo\" width=\"70\" height=\"50\" className=\"d-inline-block align-text-top\" style={{color:'#ef9273',border:'0.1rem solid black',borderRadius:'0.2rem'}}/>\r\n    <motion.b animate={{opacity:1,scale:1.2}}  initial={{opacity:0}} transition={{delay:0.4,duration:5,repeat:Infinity}} style={{color:'black'}}> Typer's Friend</motion.b>\r\n    </Link>\r\n\r\n\r\n    <div>\r\n    <img src='user.png' width='70' height='60' className=\"d-inline-block align-text-top\"/>\r\n    <b><p style={{color:'black', fontStyle:'oblique'}}>username:{users}</p></b>\r\n    </div>\r\n    \r\n  </div>\r\n</nav>\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\VICKY MISHRA\\Desktop\\my-touch-typing-app\\touch\\src\\Components\\Newlesson.js",["64","65","66","67","68","69","70"],[],"import React, { useState, useEffect } from 'react';\r\nimport Navbar from './Navbar';\r\nimport Footer from './Footer';\r\nimport { motion } from 'framer-motion';\r\nimport useSound from 'use-sound';\r\n\r\nimport Swal from 'sweetalert2';\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport { user } from './Join';\r\nexport default function Newlesson(){\r\n\r\n    let text='India, a diverse nation of rich heritage, mesmerizes with its vibrant cultures, breathtaking landscapes, and historical wonders like the Taj Mahal. From bustling cities to serene Himalayan peaks, it is a tapestry of traditions and modernity. Experience its spicy cuisine, intricate traditions, and warm hospitality that leave an indelible mark on every traveler.'\r\n    const [keyCounting, setkeyCounting] = useState(0);\r\n    const [writtenText, setwrittenText] = useState('');\r\n    const [accuracy, setAccuracy] = useState(0);\r\n    const [remainingTime, setRemainingTime] = useState(1 * 60); // 1 minutes in seconds\r\n    const [isTimerRunning, setIsTimerRunning] = useState(false);\r\n  \r\n  const [play] = useSound('click2.mp3');\r\n  const [play2] =useSound('loginsound.mp3');\r\n  const [play3] =useSound('click sound.mp3')\r\n  const [alertsound]=useSound('alert.mp3')\r\n  \r\n    useEffect(() => {\r\n      let countdownInterval;\r\n  \r\n      if (isTimerRunning) {\r\n        countdownInterval = setInterval(() => {\r\n          setRemainingTime(previousTime => previousTime - 1);\r\n        }, 1000);\r\n      }\r\n  \r\n      if (remainingTime === 0) {\r\n        clearInterval(countdownInterval);\r\n      \r\n        // take your actions when the 5-minute window is completed\r\n        alertsound()\r\n        Swal.fire('Practice session completed.  '+'accuracy='+ accuracy+'%.'+ ' no of key pressed ='+ keyCounting + ' RESET TEST TO PRACTICE AGAIN');\r\n      }\r\n  \r\n      return () => clearInterval(countdownInterval);\r\n    }, [remainingTime, isTimerRunning]);\r\n  \r\n    function startTimer() {\r\n      setIsTimerRunning(true);\r\n    }\r\n  \r\n    function stopTimer() {\r\n      setIsTimerRunning(false);\r\n    }\r\n   \r\n  \r\n    function setter() {\r\n      \r\n      Swal.fire({\r\n        title: 'Are you sure?',\r\n        text: \"You won't be able to revert this!\",\r\n        icon: 'warning',\r\n        showCancelButton: true,\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n        confirmButtonText: 'Yes, reset it!'\r\n      }).then((result) => {\r\n        if (result.isConfirmed) {\r\n          //on clicking 'yes reset it' button , result.isConfirmed set to true.\r\n          Swal.fire(\r\n            'Reset done!',\r\n            'Your file has been reset.',\r\n            'success',\r\n      setAccuracy(0),\r\n      setkeyCounting(0),\r\n      setRemainingTime(60),\r\n      setwrittenText(''),\r\n          )\r\n        }\r\n      })\r\n\r\n    }\r\n  \r\n    const changeHandler = event => {\r\n      //this function get called whenever we will do any changes in textarea i.e onchange event.\r\n      const { value } = event.target;\r\n      setwrittenText(value);//whatever i have written in text field. it get stored in 'value'\r\n      calculateAccuracy(text, value);//function get called and text and value passed\r\n      setkeyCounting(previousCounting => previousCounting + 1);\r\n    };\r\n  \r\n    const calculateAccuracy = (originalText, writtenText) => {\r\n      //originalText m text ka value a gaya and written text k textarea m likha hua vakue a gaya.\r\n      const originalWords = originalText.trim().split(' ');//the split() function depends on the delimiter you provide. In this case, using a space \" \" as the delimiter results in the string being split at each space, producing an array of words.\r\n      const typedWords = writtenText.trim().split(' ');//the trim() function removes the leading and trailing spaces.\r\n      const originalLength = originalWords.length;\r\n      let matchingWords = 0;\r\n  \r\n      for (let i = 0; i < originalLength; i++) {\r\n        if (originalWords[i] === typedWords[i]) {\r\n          matchingWords++;\r\n          originalWords[i]=' '\r\n        }\r\n      }\r\n  \r\n      const calculatedAccuracy = (matchingWords / originalLength) * 100;\r\n      setAccuracy(calculatedAccuracy.toFixed(3));\r\n    };\r\n\r\n    \r\n    return(\r\n        <motion.div style={{ borderRadius: '0.5rem' \r\n    }} animate={{ opacity: 1 }} initial={{ opacity: 0 }} transition={{ duration: 4 }} onLoad={ toast(\"Lesson changed successfully\", \r\n    { toastId: 'success1',}, \r\n      // we need to give id to each toast, otherwise same toast will execute multiple times\r\n   {position: \"top-center\",autoClose: 9014,hideProgressBar: false,closeOnClick: true,pauseOnHover: true,draggable: true,progress: undefined,theme: \"dark\",})}>\r\n   \r\n\r\n      <div\r\n        whileHover={{ scale: 1.1 }} className=\"container text-center \" style={{ backgroundImage:\r\n          'url(\"https://images.unsplash.com/photo-1537147347432-676815edd56c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxleHBsb3JlLWZlZWR8MTc3fHx8ZW58MHx8fHx8&auto=format&fit=crop&w=500&q=60\")',paddingTop: '0.5rem',paddingBottom: '0.5rem',  marginTop: '2.5rem', borderRadius: '0.5rem'}}\r\n      >\r\n        <div class=\"row\">\r\n          <div class=\"col\">\r\n\r\n            <motion.p style={{ color: '#ef9273'}}>\r\n              [instruction to type:-Please Look carefully the spaces given between two letters or words, type accordingly for better accuracy]\r\n            </motion.p>\r\n\r\n            <motion.h4 style={{ color: '#ef9273',fontSize:'bold',textShadow: '1px 1px 2px black, 0 0 25px yellow, 0 0 5px yellow'}} id=\"lesson\">\r\n              Lesson  :-{text}\r\n            </motion.h4>\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <br />\r\n\r\n      <div class=\"input-group\" style={{color:' #ef9273'}}>\r\n        <motion.textarea whileHover={{ scale: 1.1 }} onKeyDown={play3} className=\"form-control \" value={writtenText} onChange={changeHandler} onKeyUp={startTimer} onBlur={stopTimer}  aria-label=\"With textarea\" placeholder=\"Start typing .......\" style={{ color:'#ef9273',border: '0.1rem solid #ef9273', marginLeft: '5rem', marginRight: '5rem', fontSize: 50 ,backgroundColor:\"black\"}} ></motion.textarea>\r\n      </div>\r\n\r\n      <b>\r\n        <p style={{ color: '#ef9273', marginTop: '1rem' }}>Remaining Time: {remainingTime} seconds | Accuracy: {accuracy}% | No of keys pressed: {keyCounting} </p>\r\n      </b>\r\n    \r\n\r\n      <motion.button whileHover={{ scale: 1.1 }} className=\"btn  btn-danger\" style={{ backgroundColor: '#ef9273' }} onClick={setter} onFocus={play2}>\r\n       Reset the Test\r\n      </motion.button>\r\n      <ToastContainer position=\"top-center\"\r\nautoClose={9014}\r\nhideProgressBar={false}\r\nnewestOnTop={false}\r\ncloseOnClick\r\nrtl={false}\r\npauseOnFocusLoss\r\ndraggable\r\npauseOnHover\r\ntheme=\"dark\"/>\r\n\r\n    </motion.div>\r\n    )\r\n}",{"ruleId":"71","severity":1,"message":"72","line":2,"column":8,"nodeType":"73","messageId":"74","endLine":2,"endColumn":14},{"ruleId":"71","severity":1,"message":"75","line":3,"column":8,"nodeType":"73","messageId":"74","endLine":3,"endColumn":14},{"ruleId":"71","severity":1,"message":"76","line":10,"column":26,"nodeType":"73","messageId":"74","endLine":10,"endColumn":31},{"ruleId":"71","severity":1,"message":"77","line":25,"column":8,"nodeType":"73","messageId":"74","endLine":25,"endColumn":12},{"ruleId":"78","severity":1,"message":"79","line":49,"column":48,"nodeType":"80","messageId":"81","endLine":49,"endColumn":49},{"ruleId":"78","severity":1,"message":"79","line":49,"column":75,"nodeType":"80","messageId":"81","endLine":49,"endColumn":76},{"ruleId":"82","severity":1,"message":"83","line":53,"column":6,"nodeType":"84","endLine":53,"endColumn":37,"suggestions":"85"},{"ruleId":"71","severity":1,"message":"86","line":8,"column":5,"nodeType":"73","messageId":"74","endLine":8,"endColumn":11},{"ruleId":"87","severity":1,"message":"88","line":17,"column":14,"nodeType":"80","messageId":"89","endLine":17,"endColumn":16},{"ruleId":"87","severity":1,"message":"88","line":17,"column":25,"nodeType":"80","messageId":"89","endLine":17,"endColumn":27},{"ruleId":"71","severity":1,"message":"90","line":2,"column":10,"nodeType":"73","messageId":"74","endLine":2,"endColumn":14},{"ruleId":"71","severity":1,"message":"91","line":1,"column":29,"nodeType":"73","messageId":"74","endLine":1,"endColumn":37},{"ruleId":"71","severity":1,"message":"92","line":1,"column":38,"nodeType":"73","messageId":"74","endLine":1,"endColumn":51},{"ruleId":"71","severity":1,"message":"93","line":3,"column":10,"nodeType":"73","messageId":"74","endLine":3,"endColumn":14},{"ruleId":"71","severity":1,"message":"94","line":5,"column":8,"nodeType":"73","messageId":"74","endLine":5,"endColumn":16},{"ruleId":"95","severity":1,"message":"96","line":23,"column":5,"nodeType":"97","endLine":23,"endColumn":91},{"ruleId":"71","severity":1,"message":"72","line":2,"column":8,"nodeType":"73","messageId":"74","endLine":2,"endColumn":14},{"ruleId":"71","severity":1,"message":"75","line":3,"column":8,"nodeType":"73","messageId":"74","endLine":3,"endColumn":14},{"ruleId":"71","severity":1,"message":"93","line":12,"column":10,"nodeType":"73","messageId":"74","endLine":12,"endColumn":14},{"ruleId":"71","severity":1,"message":"77","line":22,"column":10,"nodeType":"73","messageId":"74","endLine":22,"endColumn":14},{"ruleId":"78","severity":1,"message":"79","line":41,"column":50,"nodeType":"80","messageId":"81","endLine":41,"endColumn":51},{"ruleId":"78","severity":1,"message":"79","line":41,"column":77,"nodeType":"80","messageId":"81","endLine":41,"endColumn":78},{"ruleId":"82","severity":1,"message":"83","line":45,"column":8,"nodeType":"84","endLine":45,"endColumn":39,"suggestions":"98"},"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'Footer' is defined but never used.","'toast' is defined but never used.","'play' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'accuracy', 'alertsound', and 'keyCounting'. Either include them or remove the dependency array.","ArrayExpression",["99"],"'emails' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","unexpected","'Link' is defined but never used.","'useState' is defined but never used.","'createContext' is defined but never used.","'user' is defined but never used.","'useSound' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["100"],{"desc":"101","fix":"102"},{"desc":"101","fix":"103"},"Update the dependencies array to be: [remainingTime, isTimerRunning, alertsound, accuracy, keyCounting]",{"range":"104","text":"105"},{"range":"106","text":"105"},[2498,2529],"[remainingTime, isTimerRunning, alertsound, accuracy, keyCounting]",[1923,1954]]